
### Event Propagation

Event propagation in JavaScript refers to how events travel through the DOM (Document Object Model) from the target element to its
 ancestors (capturing phase) and then back down again (bubbling phase). When an event occurs on an element, like a click, it doesn't 
 just affect that element; it also affects its parent elements up to the document root. This process is divided into two 
 phases: capturing and bubbling. During the capturing phase, the event starts from the outermost parent and moves inward towards
  the target element. After reaching the target, the event then bubbles back up through the parent elements. This mechanism allows
you to handle events at different levels of the DOM hierarchy based on where you attach event listeners.

### Event Delegation

Event delegation is a technique where you attach a single event listener to a parent element, rather than attaching multiple event
 listeners to each child element. This approach is beneficial when you have a large number of child elements or when child elements 
 are dynamically added or removed from the DOM. Instead of handling events directly on individual child elements, you listen for 
 events on the parent element and use the `event.target` property to determine which specific child element triggered the event. 
 Event delegation simplifies event management and can improve performance by reducing the number of event listeners.

### Event Bubbling

Event bubbling is the phase of event propagation where an event travels from the target element back up through its ancestors in
the DOM hierarchy. After an event is handled on the target element, it bubbles up through each parent element until it reaches the
document root. This allows parent elements to "hear" about events that occur on their children without having a direct event 
listener on each child element. Event bubbling is the default behavior in most modern browsers and can be useful for structuring
event handling in complex DOM structures.

### Debouncing

Debouncing is a technique used to limit the rate at which a function is executed. It's commonly used with event handlers that trigger
actions that may be computationally expensive or resource-intensive, such as fetching data from a server or updating the UI. When you 
debounce a function, you ensure that it will not be called repeatedly within a short period of time. Instead, the function will only 
execute after a specified delay has passed since the last invocation. This helps optimize performance by reducing the number of times 
a function is executed unnecessarily, especially in scenarios where rapid firing of events could lead to performance bottlenecks.



Event Delegation: One parent handles events for many children.
Event Propagation: How events move through the DOM.
Event Bubbling: Events move up from the target element.
Event Capturing: Events move down to the target element.
Throttling: Limits how often a function runs.
Debouncing: Delays function execution until no events occur for a set time.
Preventing Default Behavior: Stops the default action of an event.
Stopping Propagation: Stops the event from moving up or down the DOM.





### Event Delegation

**Event delegation** is a technique where you add a single event listener to a parent element instead of adding multiple event listeners to individual child elements. The event listener on the parent element can handle events that happen on its children. This is useful for improving performance and managing event listeners more easily.

**Example**:
Instead of adding a click event listener to each button in a list, you add one listener to the parent container.




### Event Propagation

**Event propagation** refers to the way events travel through the DOM tree. It has three phases:

1. **Capturing Phase**: The event starts from the root and travels down to the target element.
2. **Target Phase**: The event reaches the target element.
3. **Bubbling Phase**: The event bubbles up from the target element to the root.

### Event Bubbling

**Event bubbling** is the phase where an event starts from the target element and travels up to the root element, triggering any event listeners on its way up.

**Example**:
If you click a button inside a div, the click event will first trigger on the button, then on the div, and then on its parent elements up to the root.



### Event Capturing

**Event capturing** (or trickling) is the phase where an event starts from the root and travels down to the target element, triggering any event listeners on its way down. By default, event listeners are not in capturing mode, but you can set them to be.

**Example**:
To see capturing in action, you set the `capture` option to `true` when adding an event listener.



### Throttling

**Throttling** is a technique to ensure a function is called at most once in a specified period of time, no matter how many times an event is triggered. It helps in optimizing performance for events that may fire frequently, such as scrolling or resizing.

**Example**:
Throttling a function to be called at most once every 500 milliseconds.



### Debouncing

**Debouncing** is a technique to ensure a function is called only after a specified period of time has passed since the last time it was invoked. This is useful for events like key presses, where you want to wait until the user has stopped typing before performing an action.

**Example**:
Debouncing a function to be called only after 300 milliseconds of no activity.



### Summary

- **Event Delegation**: Adding one event listener to a parent to manage events on its children.
- **Event Propagation**: The way events move through the DOM in capturing and bubbling phases.
- **Event Bubbling**: Event travels up from the target element to the root.
- **Event Capturing**: Event travels down from the root to the target element.
- **Throttling**: Ensures a function is called at most once in a specified time period.
- **Debouncing**: Ensures a function is called only after a specified time period of no activity.

